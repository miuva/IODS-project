13/41
0,31*41
0.31*41
12.71-7
5.71/100
41x + 7 /100
12.71+7
source("/Users/mirva/OneDrive - University of Helsinki/Tilaston sivuaine/Todari I/generaattori.R")
jono <- sarja(1,1000)
jono[1000]
0.04395604/0.8153846
0.04395604*2
0.04395604/0.08791208
(9/15)*(8/14)*(7/13)
0.1846154+0.04395604
0.04395604/0.2285714
9*8*7*6*5*4*3*3
6*
7*6*5*4*3*2*2
544320/60480
9*6
(15*14*13)/(3*2)
54/455
15*9
(15*14*13)/(3*2)
135/455
0.2967033+0.1186813
0.4153846/0.1186813
0.1186813/0.4153846
(6*5*4*3*2)/(5*4*3*2)
(9*8)/2
6*36
(15*14*13)/6
216/455
(6*5)/2
15*9
(15*14*13)/6
135/455
0.4747253+0.2967033
0.7714286
0.4747253/0.7714286
# PT 1
# Mirva Turkia 31.1.2017
# This is the script file for the data wrangling exercise
# PT 2
JYTdata <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt",
sep="\t", header=TRUE)
JYTdata
str(JYTdata)
dim(JYTdata)
# structure: 183 observations, 60 variables
# PT 3
# Gender: Male = 1  Female = 2
# Age: Age (in years) derived from the date of birth
# Attitude: Global attitude toward statistics ~Da+Db+Dc+Dd+De+Df+Dg+Dh+Di+Dj
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22",
"D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21",
"SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt",
sep="\t", header=TRUE)
lrn14
str(lrn2014)
dim(lrn14)
library(dplyr)
install.packages("Dplyr")
install.packages("dplyr")
library(dplyr)
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
getwd()
setwd("/Users/mirva/IODS-project/data")
learning2014 = read.csv("learning2014")
dim(learning2014)
str(learning2014)
(5/36)*(1/6)
1/36
6*36
0,1*0,05*0,01
0.1*0.05*0.01
0.00005
0.9*0.95*0.99
(0,05+0,01)*0,9
(0.05+0.01)*0.9
(0.05*0.01)*0.9
(0.05+0.01-0.05*0.01)*0.9
0.1+0.05+0.01-0.1*0.05*0.01
0,1+0,05+0,01-0,1*0,05*0,01
0.1+0.05+0.01-0.1*0.05*0.01
0.84645+0.15995
0.84645+0.15995-0.84645*0.15995
0.1*0.95*0.99
0.9*0.05*0.99
0.9*0.95*0.01
0.09405+0.04455+0.00855
0.84645+0.14715
0.3*0.7^4
5*0.3*0.7^4
5*0.3*(0.7^4)
5*0.03*(0.07^4)
5*0.03*(0.97^4)
0.7^5
1-0.16807
0.07^5
1-1.6807e-06
0.97^5
1-0.858734
1-0.858734-0.132793
0.6*0.01+0.25*0.05+0.15*0,01
0.6*0.01+0.25*0.05+0.15*0.01
0.6*0,01
0.6*0.01
0.25*0.05
0.15*0.01
0.006*0.0125*0.0015
0,0000000*1.125
0.0000000*1.125
0.00000001*1.125
0.0000001*1.125
0.1*1.125
1.125*(10^-7)
0.006+0.0125+0.0015-1.125e-07
0.6*0.01+0.25*0.05+0.15*0.01
0.6*0.01+0.25*0.02+0.15*0.03
(0.6*0.01)/0.0155
0,7*0,2
0.7*0.2
0,24/(0,24+0,14)
0.24/(0.24+0.14)
(9*8*7)
(9*8*7)/6
(15*14*13)/6
84/455
6*((9*8)/2)
216/455
135/455
(6*5*4)/6
20/455
?plot
f = rep(0,12);
for (x in 1:6) {
for (y in 1:6) {
# Tämä parin todennäköisyys
pxy = 1/36
# Summan arvo, jos toteutuu tämä pari
s = x+y
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxy
}
}
print(f)
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,12);
# Käydään läpi kaikki mahdolliset
# parin (X,Y) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:4) {
# Tämä parin todennäköisyys
pxy = 1/24
# Summan arvo, jos toteutuu tämä pari
s = x+y
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxy
}
}
# Näytetään arvot
print(f)
1/24
2/24
f = rep(0,9);
f = rep(0,9);
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,9);
# Käydään läpi kaikki mahdolliset
# parin (X,Y) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:4) {
# Tämä parin todennäköisyys
pxy = 1/24
# Summan arvo, jos toteutuu tämä pari
s = x+y
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxy
}
}
# Näytetään arvot
print(f)
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,10);
# Käydään läpi kaikki mahdolliset
# parin (X,Y) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:4) {
# Tämä parin todennäköisyys
pxy = 1/24
# Summan arvo, jos toteutuu tämä pari
s = x+y
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxy
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
p = rep(0,10);
# Käydään läpi kaikki mahdolliset
# parin (X,Y) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:4) {
# Tämä parin todennäköisyys
pxy = 1/24
# Summan arvo, jos toteutuu tämä pari
s = x+y
# Lisätään kyseisen summan todennäköisyyteen
p[s] = p[s] + pxy
}
}
# Näytetään arvot
print(p)
plot(p, type="h")
36*6
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,12);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(p)
f = rep(0,14);
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,14);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(p)
plot(p, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,14);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,12);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,16);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,18);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,20);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(2,18);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,18);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
# Luodaan vektori f, jonka jokainen komponentti on 0
f = rep(0,18);
# Käydään läpi kaikki mahdolliset
# parin (X,Y,Z) arvot, kukin tasan kerran.
for (x in 1:6) {
for (y in 1:6) {
for (z in 1:6) {
# Tämä parin todennäköisyys
pxyz = 1/216
# Summan arvo, jos toteutuu tämä pari
s = x+y+z
# Lisätään kyseisen summan todennäköisyyteen
f[s] = f[s] + pxyz
}
}
}
# Näytetään arvot
print(f)
plot(f, type="h")
library(ggplot2); library(dplyr); library(GGally)
getwd()
setwd("/Users/mirva/IODS-project/data")
alc = read.csv("alcohol")
str(alc)
alc %>% group_by(Pstatus, high_use) %>% summarise(count = n())
alc %>% group_by(Medu, high_use) %>% summarise(count = n())
g1me <- ggplot(alc, aes(x = high_use, y = Medu))
g1me + geom_boxplot() + xlab("High alcohol consumption") + ylab("Mothers education")
alc %>% group_by(Fedu, high_use) %>% summarise(count = n())
g1fe <- ggplot(alc, aes(x = high_use, y = Fedu))
g1fe + geom_boxplot() + xlab("High alcohol consumption") + ylab("Fathers education")
alc %>% group_by(famrel, high_use) %>% summarise(count = n())
g1fr <- ggplot(alc, aes(x = high_use, y = Fedu))
g1fr + geom_boxplot() + xlab("High alcohol consumption") + ylab("Quality of family relations")
m <- glm(high_use ~ Pstatus + Medu + Fedu + famrel, data = alc, family = "binomial")
summary.glm(m)
coef(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
m2 <- glm(high_use ~ Medu + Fedu + famrel, data = alc, family = "binomial")
summary.glm(m2)
m3 <- glm(high_use ~ Fedu + famrel, data = alc, family = "binomial")
summary.glm(m3)
m4 <- glm(high_use ~ famrel, data = alc, family = "binomial")
summary.glm(m4)
probabilities <- predict(m4, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = probability > 0.5)
table(high_use = alc$high_use, prediction = alc$prediction)
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g2 <- g + geom_point()
g2
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
?predict
g2
install.packages("boot")
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m4, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ failures + absences + sex + famrel, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m4, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m4, K = 10)
cv$delta[1]
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ failures + absences + sex + famrel, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ failures + absences + sex + famrel + health + studytime, data = alc, family = "binomial")
summary.glm(m5)
m5 <- glm(high_use ~ failures + absences + sex + famrel + studytime, data = alc, family = "binomial")
summary.glm(m5)
m5 <- glm(high_use ~ absences + sex + famrel + studytime, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + studytime + paid, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + studytime + paid + famrel, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + studytime + paid + famrel + activities, data = alc, family = "binomial")
summary.glm(m5)
m5 <- glm(high_use ~ absences + sex + famrel + studytime + paid + famrel + goout, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + famrel + goout, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + goout, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + goout + romantic, data = alc, family = "binomial")
summary.glm(m5)
m5 <- glm(high_use ~ absences + sex + famrel + goout, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
m5 <- glm(high_use ~ absences + sex + famrel + goout, data = alc, family = "binomial")
summary.glm(m5)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m5, K = 10)
cv$delta[1]
